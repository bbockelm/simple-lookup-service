#!/usr/bin/env python

"""
Produce a formatted report from sls hosts.
"""

import json
import pprint
import warnings
from optparse import OptionParser

import requests

from sls_client.find_host_info import get_host_info_json

pp = pprint.PrettyPrinter(indent=4)

ACTIVE_HOSTS = 'http://ps-west.es.net/lookup/activehosts.json'


class SlsReportException(Exception):
    """Custom SlsReport exception"""
    def __init__(self, value):
        # pylint: disable=super-init-not-called
        self.value = value

    def __str__(self):
        return repr(self.value)


class SlsReportWarning(Warning):
    """Custom SlsReport warning"""
    pass


def _warn(msg):
    """raise a custom warning."""
    warnings.warn(msg, SlsReportWarning, stacklevel=2)


def get_lookup_host_list(options):
    """Generate a list of hosts from the lookup hosts."""
    hosts = list()

    r = requests.get(options.active_source)

    if not r.status_code == 200:
        raise SlsReportException('Request to {host} failed: status:{code} {msg}'.format(
            host=options.active_source,
            code=r.status_code,
            msg=r.content
            ))

    host_source = json.loads(r.content)

    if options.verbose:
        pp.pprint(host_source)

    for i in host_source.get('hosts'):
        hosts.append(i.get('locator'))

    return hosts


def get_host_list(lookup_hosts, options):
    """Ask the lookup hosts what they know."""
    hosts = list()
    bad_lookup = list()

    for look in lookup_hosts:
        # requests.exceptions.ConnectionError:
        r = requests.get(look, params=dict(type='host'))
        if not r.status_code == 200:
            bad_lookup.append(look)

        payload = json.loads(r.content)

        if options.verbose:
            pp.pprint(payload)

        for i in payload:  # XXX: work this out?
            if i.get('host-name')[0]:
                hosts += i.get('host-name')

    if bad_lookup:
        msg = 'requests to lookup host(s) failed: {h}'.format(h=' | '.join(bad_lookup))
        _warn(msg)

    return hosts


def main():
    """Execute the report."""
    usage = '%prog [ -h ACTIVE_HOSTS | -v ]'
    parser = OptionParser(usage=usage)
    parser.add_option('-a', '--active-hosts', metavar='ACTIVE_SOURCE',
                      type='string', dest='active_source', default=ACTIVE_HOSTS,
                      help='Source of the seed active hosts file (default: %default) .')
    parser.add_option('-v', '--verbose',
                      dest='verbose', action='store_true', default=False,
                      help='Verbose output.')
    options, _ = parser.parse_args()

    try:
        lookup_hosts = get_lookup_host_list(options)
    except SlsReportException as ex:
        print str(ex)
        return -1

    hosts = get_host_list(lookup_hosts, options)

    pp.pprint(hosts)

if __name__ == '__main__':
    main()
