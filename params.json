{"name":"Simple-lookup-service","tagline":"sLS code","body":"This page gives an overview of simple lookup service\r\n\r\n# Introduction\r\nThe Simple Lookup Service(sLS) is a REST/JSON based lookup service written in Java.\r\n\r\nIt registers collections of key-value pairs referred as \"records\". The records will remain in the lookup service for a stipulated amount of time, known as \"lease\" time. Clients can renew the lease before it expires. If a client does not renew the lease, the record is automatically removed from the loookup service. A client can also explicitly delete a record.\r\n\r\nIn addition, a lookup service may also subscribe to another lookup service. When a lookup service subscribes to another lookup service, from that point onwards, the former will automatically receive new record registrations or updates to existing records from the latter.\r\n\r\nThe Simple Lookup Service can be deployed as a single centralized node or in a distributed fashion.\r\n\r\n# Motivation\r\nThe sLS project was started as a replacement for the XML based perfSONAR Lookup Service.The perfSONAR community developed and deployed a lookup service that registers all perfSONAR services, and some other non-perfSONAR services (Eg: OSCARS friendly names). Over the past few years, as the perfSONAR community steadily grew, it increased the number of toolkit deployments. This, in turn, increased the number of services registering with the LS and the number of queries to the LS. The perfSONAR LS deployment found it difficult to deal with this increase in load. This resulted in some serious performance and reliability issues. A redesign effort was initiated to address these issues.\r\n\r\n# Requirements and Scope\r\nSince, sLS was meant to be a replacement for the perfSONAR LS, the requirements for sLS were driven by the needs of the perfSONAR community. As a result, although the requirements themselves are generic enough, some of the numbers in the requirements specification was determined by the needs of the perfSONAR community.\r\n\r\nThe requirements can be summarized as follows:\r\n  - Scalability - The lookup service should support be able to support at least 10,000 service records without significant performance degradation. The maximum limit is 100,000.\r\n  - Query Time - The average time to respond to a query should be 1 second. The maximum time bound on the lookup service should be 5 seconds.\r\n  - Registration Time - The maximum time that it should take a service to be registered and become globally visible is 1 hour.\r\n  - Availability - The LS can be deployed in a manner which will provide 99.9% uptime.\r\n  - Security - The LS should allow records to contain authentication and/or authorization credentials that can be consumed by the querying client. It is NOT a requirement that the lookup service be responsible for verifying or enforcing security credentials.\r\n  - Queries - The lookup service should be able to apply a set of filters and return records that match these filters.\r\nAdditionally, the sLS also addresses the following key issues:\r\n  - generic API\r\n  - easy to use\r\n  - stability\r\n\r\n# Design Overview\r\n## Data Representation\r\nAs described in the \"Overview\" section, the data is represented as \"records\". Records are nothing but a collection of key-value pairs. The keys are strings and values are list of one or more strings. A sample record may look like this:\r\n\r\n```\r\n{   \"type\": \"service\",\r\n    \"service-type\": [\"service-accesspoint\": [\"http://somehost.some.domain:port/service/bwctl\"](\"bwctl\"],),\r\n    \"uri\": \"lookup/service/uniquerecordid\"\r\n    \"expires\": \"2013-05-06T23:10:14.577Z\"\r\n}\r\n```\r\n\r\nSimple Lookup Service defines a set of records. Since, sLS is designed to be very general, it can therefore register any type of record, including user-defined ones. \r\n\r\nDetails about the predefined records and guidelines to define new record types can be found in the [Records document](Records).\r\n\r\n## API\r\nMost of the web services are based on either SOAP/XML or REST/JSON. Each technology has its own set of advantages and disadvantages. REST/JSON based APIs are usually simple and easy to use. Also, it is easy and intuitive to express key-value pairs in JSON. Hence, REST/JSON was the obvious choice for sLS.\r\n\r\nThe API itself can be divided into 3 main sections:\r\n\r\n  1. Record Management - Register/edit a service using simple HTTP calls(POST, DELETE, GET). Example:\r\n```\r\ncurl -v -H \"Content-Type: application/json\" -X POST -d '{\"type\":[Ping Responder\"](\"service\"],\"service-locator\":[\"somehost.es.net\"],\"service-name\":[\"ESnet),\"service-type\":[ \"ping\"]}' http://somehost.some.domain:8090/lookup/records\r\n```\r\n  1. Query - Query the lookup service for records using HTTP GET Example:\r\n```\r\ncurl -v -H \"Content-Type: application/js\" -X GET http://somehost.some.domain:8090/lookup/records/?type=service\r\n```\r\n  1. Subscribe - Get new registrations and updates to records on a separate channel.\r\nTo learn more about the API, please refer to [APISpec](APISpec)\r\n\r\n## Backend Database\r\nThe sLS data is represented as simple key-value pairs and the API is in JSON. Our approach was to keep the coupling between the data and the database loose and at the same time optimize performance by choosing a database that can inherently support key-value pairs and thus avoid translating data from one format to another. Since, MongoDB met the requirements, we decided to use MongoDB as the backend database for sLS.\r\n\r\n# Architecture\r\nThe Simple Lookup Service(sLS) node is the basic building block of sLS architecture. As shown in figure 1. the sLS node consists of API and the database. Depending on the architecture, this sLS node may be configured as one of the following:\r\n  - core/source node - this node is the source of truth. This is where clients will register/edit records. The sLS architecture will contain *one* or more nodes of this type.\r\n  - cache node - As the name suggests, this node will cache data from core/source node and helps in optimizing query performance. This node does not accept registrations or edits to the records.The sLS architecture may contain *zero* or more nodes of this type.\r\n  - archive node - This node keeps track of all the records in the lookup service (including deleted and expired ones).\r\n  - back-up node - For a reliable and highly available service, each of the core node should have a back-up node. When the core node goes down, the back-up node will become the source node.\r\n\r\nFor more details, please refer to [this page](DesignDocuments)\r\n\r\n\r\n# Clients\r\nThe Simple Lookup Service is simple and easy to use that it can be used directly by command line clients like curl. In addition, we intend to provide client libraries in Perl, Python and Java. Developers can use these client libraries to develop web applications or use with third party software to interact with sLS. \r\n\r\nDetails about the clients can be found in the [ClientAPI doc](ClientAPI).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}